# Git Cheatsheet
A compact reference for the most common Git tasks. Learn the flow so it
becomes muscle memory.

──────────────────────────────────────────────────────────────────────────────
SETUP (one-time, per machine)
──────────────────────────────────────────────────────────────────────────────
git config --global user.name "Your Name"
git config --global user.email "you@example.com"
git config --global init.defaultBranch main
git config --global pull.rebase true          # pulls rebase by default (cleaner history)
git config --global core.editor "code --wait" # use VS Code for commit messages

SSH (recommended):
ssh-keygen -t ed25519 -C "you@example.com"
# add ~/.ssh/id_ed25519.pub to GitHub → Settings → SSH keys
ssh -T git@github.com  # test

──────────────────────────────────────────────────────────────────────────────
REMOTE REPOS
──────────────────────────────────────────────────────────────────────────────
git clone git@github.com:USER/REPO.git        # clone with SSH
git remote -v                                 # list remotes
git branch -M main                            # rename current branch to main

# First push from a new repo/branch (sets upstream):
git push -u origin main

# Later pushes (after upstream is set):
git push                                       # equivalent to 'git push origin main' ONLY IF upstream is set

──────────────────────────────────────────────────────────────────────────────
DAILY WORKFLOW
──────────────────────────────────────────────────────────────────────────────
git status                                     # what's changed / staged / untracked
git add .                                      # stage everything in the folder
git add -p                                     # stage changes interactively (hunks)
git commit -m "Brief, imperative summary"      # snapshot

git pull                                       # fetch + rebase (because of pull.rebase=true)
git push                                       # publish your commits

──────────────────────────────────────────────────────────────────────────────
HISTORY & DIFFS
──────────────────────────────────────────────────────────────────────────────
git log --oneline --graph --decorate --all     # compact, readable history
git log -p                                     # history with patches
git diff                                       # unstaged differences
git diff --staged                              # what’s staged vs last commit

──────────────────────────────────────────────────────────────────────────────
BRANCHING
──────────────────────────────────────────────────────────────────────────────
git switch -c feature/short-name               # create + switch to a new branch
git switch main                                # go back to main
git merge feature/short-name                   # merge feature into current branch
# or rebase your feature onto latest main:
git switch feature/short-name
git rebase main

──────────────────────────────────────────────────────────────────────────────
UNDO / FIXUPS
──────────────────────────────────────────────────────────────────────────────
git restore path/file                          # discard WORKING changes in a file
git restore --staged path/file                 # unstage (keep working changes)
git commit --amend                             # change the last commit message/files (if not pushed)
git revert <commit>                            # new commit that undoes a specific commit (safe on shared branches)

──────────────────────────────────────────────────────────────────────────────
MENTAL MODEL
──────────────────────────────────────────────────────────────────────────────
Basic syntax:  git | action | destination

Examples:
- git add .            → program | action | everything-here
- git commit -m "..."  → program | action -m | message
- git status           → program | action    | (no destination)

──────────────────────────────────────────────────────────────────────────────
BEST PRACTICES
──────────────────────────────────────────────────────────────────────────────
• Make atomic commits: one logical change per commit.
• Write imperative, present-tense messages:
  "Fix nav spacing" (not "Fixed" or "Fixes nav spacing").
• Push often; pull (rebase) before you start new work.
• Use branches for features; merge/rebase when done.
